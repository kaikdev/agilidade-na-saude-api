const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const UserService = require("../services/UserService");
const MailService = require("../services/MailService");
const logEvent = require("../services/LogService");
require("dotenv").config();

const PasswordController = {
  // Alterar senha (usuário autenticado)
changePassword: async (req, res) => {
  try {
    const { oldPassword, newPassword } = req.body;
    const userId = req.user.id;

    // Obtém o usuário
    const user = await UserService.getUserById(userId);

    if (!user) {
      logEvent(`Usuário não encontrado: ${userId}`);
      return res.status(404).json({ error: "Usuário não encontrado." });
    }

    // Verifica a senha antiga
    const isMatch = await bcrypt.compare(oldPassword, user.password);
    if (!isMatch) {
      logEvent(`Tentativa falha de troca de senha - Usuário ID: ${userId}`);
      return res.status(400).json({ error: "Senha antiga incorreta." });
    }

    // Gera o novo hash
    const hashedPassword = await bcrypt.hash(newPassword, 10);

    // Atualiza a senha
    await UserService.updatePassword(userId, hashedPassword);

    logEvent(`Senha alterada com sucesso - Usuário ID: ${userId}`);
    res.json({ message: "Senha alterada com sucesso!" });

  } catch (error) {
    console.error("Erro ao trocar a senha:", error);
    res.status(500).json({ error: "Erro ao atualizar senha." });
  }
},

  // Enviar e-mail de recuperação
  forgotPassword : async (req, res) => {
  try {
    const { email } = req.body;

    console.log(`Solicitação de recuperação de senha para o e-mail: ${email}`);

    const user = await UserService.getUserByEmail(email);

    if (!user) {
      logEvent(`E-mail não encontrado: ${email}`);
      return res.status(404).json({ error: "E-mail não encontrado." });
    }

    const token = jwt.sign({ id: user.id }, process.env.JWT_SECRET, {
      expiresIn: "15m",
    });

    const sendReset = await MailService.sendResetPasswordEmail(email, token);

    if (!sendReset) {
      logEvent(`Erro ao enviar e-mail para: ${email}`);
      return res.status(500).json({ error: "Erro ao enviar e-mail." });
    }

    res.json({ message: "E-mail de recuperação enviado com sucesso!" });
  } catch (error) {
    console.error("Erro ao processar solicitação de recuperação:", error);
    return res.status(500).json({ error: "Erro interno no servidor." });
  }
},

  // Resetar senha com token
 resetPassword: async (req, res) => {
  try {
    const { token, newPassword } = req.body;

    let decoded;
    try {
      decoded = jwt.verify(token, process.env.JWT_SECRET);
    } catch (error) {
      logEvent(`Token inválido ou expirado.`);
      return res.status(400).json({ error: "Token inválido ou expirado." });
    }

    const hashedPassword = await bcrypt.hash(newPassword, 10);

    await UserService.updatePassword(decoded.id, hashedPassword);

    logEvent(`Senha redefinida com sucesso - Usuário ID: ${decoded.id}`);
    res.json({ message: "Senha redefinida com sucesso!" });
  } catch (error) {
    console.error("Erro ao redefinir senha:", error);
    logEvent(`Erro ao redefinir senha - Usuário ID: ${error?.decoded?.id || "desconhecido"}`);
    res.status(500).json({ error: "Erro ao redefinir senha." });
  }
}
};

module.exports = PasswordController;











# Node.js
node_modules/

# Arquivos de banco de dados SQLite
*.sqlite
*.sqlite3

# Arquivos de ambiente
.env

# Logs
npm-debug.log
yarn-debug.log
yarn-error.log

# Arquivos temporários de IDEs (como VSCode, IntelliJ, etc.)
.vscode/
.idea/

# Sistema operacional (Windows, macOS)
Thumbs.db
.DS_Store

# Pastas de cache e build
dist/
build/

database.sqlite-shm
database.sqlite-wal
logs/app.log


